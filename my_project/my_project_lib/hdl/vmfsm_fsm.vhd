-- VHDL Entity my_project_lib.VMFSM.symbol
--
-- Created:
--          by - Samirajean.UNKNOWN (SAMIRAJEANPC)
--          at - 12:09:03 05/12/2019
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2007.1 (Build 19)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

ENTITY VMFSM IS
   PORT( 
      cashin     : IN     std_ulogic_vector ( 3 DOWNTO 0 );
      clk        : IN     std_logic;
      itemselect : IN     std_logic_vector ( 1 DOWNTO 0 );
      rst        : IN     std_logic;
      cash       : OUT    std_logic_vector ( 3 DOWNTO 0 );
      item       : OUT    std_logic_vector ( 1 DOWNTO 0 );
      msg        : OUT    string ( 19 DOWNTO 0 );
      y          : OUT    std_logic
   );

-- Declarations

END VMFSM ;

--
-- VHDL Architecture my_project_lib.VMFSM.fsm
--
-- Created:
--          by - Samirajean.UNKNOWN (SAMIRAJEANPC)
--          at - 12:09:03 05/12/2019
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2007.1 (Build 19)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
 
ARCHITECTURE fsm OF VMFSM IS

   -- Architecture Declarations
   SIGNAL cashout : unsigned( 3 DOWNTO 0 );  
   SIGNAL item1 : unsigned( 3 DOWNTO 0 );  
   SIGNAL item2 : unsigned( 3 DOWNTO 0 );  
   SIGNAL item3 : unsigned( 3 DOWNTO 0 );  

   TYPE STATE_TYPE IS (
      ItemSelect,
      Item1Avil,
      Item2Avil,
      Item3Avil,
      price1,
      price2,
      price3,
      output
   );
 
   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      rst
   )
   -----------------------------------------------------------------
   BEGIN
      IF (rst = '0') THEN
         current_state <= ItemSelect;
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;

         -- Combined Actions
         CASE current_state IS
            WHEN price1 => 
               IF (cashin < 1) THEN 
               ELSIF (cashin >= 1) THEN 
                  cashout<= cashin -1;
                  item1 <= item1 -1;
               END IF;
            WHEN price2 => 
               IF (cashin < 2) THEN 
               ELSIF (cashin >= 2) THEN 
                  cashout<= cashin -2;
                  item2 <= item2 -1;
               END IF;
            WHEN price3 => 
               IF (item3 > 0) THEN 
               ELSIF (cashin >= 5) THEN 
                  cashout<= cashin -5;
                  item3 <= item3 -1;
               END IF;
            WHEN OTHERS =>
               NULL;
         END CASE;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      cashin,
      cashout,
      current_state,
      item1,
      item2,
      item3
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN ItemSelect => 
            IF (itemselect = "01") THEN 
               next_state <= Item1Avil;
            ELSIF (itemselect = "10") THEN 
               next_state <= Item2Avil;
            ELSIF (itemselect ="11") THEN 
               next_state <= Item3Avil;
            ELSIF (itemselect = "00") THEN 
               next_state <= ItemSelect;
            ELSE
               next_state <= ItemSelect;
            END IF;
         WHEN Item1Avil => 
            IF (item1 > 0) THEN 
               next_state <= price1;
            ELSIF (item1 = 0) THEN 
               next_state <= ItemSelect;
            ELSE
               next_state <= Item1Avil;
            END IF;
         WHEN Item2Avil => 
            IF (item2 > 0) THEN 
               next_state <= price2;
            ELSIF (item2 =0) THEN 
               next_state <= ItemSelect;
            ELSE
               next_state <= Item2Avil;
            END IF;
         WHEN Item3Avil => 
            IF (cashin < 5) THEN 
               next_state <= price3;
            ELSIF (item3 = 0) THEN 
               next_state <= ItemSelect;
            ELSE
               next_state <= Item3Avil;
            END IF;
         WHEN price1 => 
            IF (cashin < 1) THEN 
               next_state <= Item1Avil;
            ELSIF (cashin >= 1) THEN 
               next_state <= output;
            ELSE
               next_state <= price1;
            END IF;
         WHEN price2 => 
            IF (cashin < 2) THEN 
               next_state <= Item2Avil;
            ELSIF (cashin >= 2) THEN 
               next_state <= output;
            ELSE
               next_state <= price2;
            END IF;
         WHEN price3 => 
            IF (item3 > 0) THEN 
               next_state <= Item3Avil;
            ELSIF (cashin >= 5) THEN 
               next_state <= output;
            ELSE
               next_state <= price3;
            END IF;
         WHEN output => 
            IF (cashout > 0) THEN 
               next_state <= ItemSelect;
            ELSIF (cashout = 0) THEN 
               next_state <= ItemSelect;
            ELSE
               next_state <= output;
            END IF;
         WHEN OTHERS =>
            next_state <= ItemSelect;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      cashin,
      cashout,
      current_state,
      item1,
      item2,
      item3
   )
   -----------------------------------------------------------------
   BEGIN

      -- Combined Actions
      CASE current_state IS
         WHEN ItemSelect => 
            IF (itemselect = "01") THEN 
               y<='0';
            ELSIF (itemselect = "10") THEN 
               y<='0';
            ELSIF (itemselect ="11") THEN 
               y<='0';
            ELSIF (itemselect = "00") THEN 
               y<='0';
               msg <= "select item";
            END IF;
         WHEN Item1Avil => 
            IF (item1 > 0) THEN 
               y<='0';
               msg <= "input money";
            ELSIF (item1 = 0) THEN 
               y<='0';
               msg <= "item sold out";
            END IF;
         WHEN Item2Avil => 
            IF (item2 > 0) THEN 
               y<='0';
               msg <= "input money";
            ELSIF (item2 =0) THEN 
               y<='0';
               msg <= "item sold out";
            END IF;
         WHEN Item3Avil => 
            IF (cashin < 5) THEN 
               y<='0';
               msg <= "cash not sufficiant";
            ELSIF (item3 = 0) THEN 
               y<='0';
               msg <= "item sold out";
            END IF;
         WHEN price1 => 
            IF (cashin < 1) THEN 
               y<='0';
               msg <= "cash not sufficiant";
            ELSIF (cashin >= 1) THEN 
               y<='0';
            END IF;
         WHEN price2 => 
            IF (cashin < 2) THEN 
               y<='0';
               msg <= "cash not sufficiant";
            ELSIF (cashin >= 2) THEN 
               y<='0';
            END IF;
         WHEN price3 => 
            IF (item3 > 0) THEN 
               y<='0';
               msg <= "input money";
            ELSIF (cashin >= 5) THEN 
               y<='0';
            END IF;
         WHEN output => 
            IF (cashout > 0) THEN 
               y<='1';
               cash <= std_logic_vector(cashout);
               item <= itemselect;
               msg <= "succeeded";
            ELSIF (cashout = 0) THEN 
               y<='1';
               item <= itemselect;
               msg <= "succeeded";
            END IF;
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
END fsm;
